// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2020 21:49:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          crc24
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module crc24_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg d_in;
reg en_com;
reg init;
reg nen_shift;
reg reset;
// wires                                               
wire [23:0] crc_out;

// assign statements (if any)                          
crc24 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.crc_out(crc_out),
	.d_in(d_in),
	.en_com(en_com),
	.init(init),
	.nen_shift(nen_shift),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// d_in
initial
begin
	d_in = 1'b0;
	d_in = #40000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #50000 1'b1;
	d_in = #50000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
	d_in = #10000 1'b1;
	d_in = #10000 1'b0;
end 

// en_com
initial
begin
	en_com = 1'b0;
	en_com = #20000 1'b1;
	en_com = #770000 1'b0;
end 

// init
initial
begin
	init = 1'b0;
	init = #20000 1'b1;
	init = #10000 1'b0;
end 

// nen_shift
initial
begin
	nen_shift = 1'b0;
	nen_shift = #20000 1'b1;
	nen_shift = #410000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
endmodule

