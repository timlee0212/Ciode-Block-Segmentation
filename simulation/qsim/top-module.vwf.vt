// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2020 16:48:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cb_seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cb_seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg tb_in;
reg [15:0] tb_size_in;
reg wreq_data;
reg wreq_size;
// wires                                               
wire cb_data;
wire cb_size;
wire crc;
wire filling;
wire start;
wire stop;

// assign statements (if any)                          
cb_seg i1 (
// port map - connection between master ports and signals/registers   
	.cb_data(cb_data),
	.cb_size(cb_size),
	.clk(clk),
	.crc(crc),
	.filling(filling),
	.reset(reset),
	.start(start),
	.stop(stop),
	.tb_in(tb_in),
	.tb_size_in(tb_size_in),
	.wreq_data(wreq_data),
	.wreq_size(wreq_size)
);
initial 
begin 
#50000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// tb_in
initial
begin
	tb_in = 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #70000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #50000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #60000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #80000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #60000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #70000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #90000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #50000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #50000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #70000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #50000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #70000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #60000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #70000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #70000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #90000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #60000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #50000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #40000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #110000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #30000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #60000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #70000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #50000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #10000 1'b1;
	tb_in = #20000 1'b0;
	tb_in = #20000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #30000 1'b1;
	tb_in = #10000 1'b0;
	tb_in = #40000 1'b1;
	tb_in = #19000 1'b0;
end 
// tb_size_in[ 15 ]
initial
begin
	tb_size_in[15] = 1'b0;
end 
// tb_size_in[ 14 ]
initial
begin
	tb_size_in[14] = 1'b0;
end 
// tb_size_in[ 13 ]
initial
begin
	tb_size_in[13] = 1'b0;
end 
// tb_size_in[ 12 ]
initial
begin
	tb_size_in[12] = 1'b0;
end 
// tb_size_in[ 11 ]
initial
begin
	tb_size_in[11] = 1'b0;
end 
// tb_size_in[ 10 ]
initial
begin
	tb_size_in[10] = 1'b0;
end 
// tb_size_in[ 9 ]
initial
begin
	tb_size_in[9] = 1'b0;
	tb_size_in[9] = #30000 1'b1;
	tb_size_in[9] = #30000 1'b0;
end 
// tb_size_in[ 8 ]
initial
begin
	tb_size_in[8] = 1'b0;
	tb_size_in[8] = #30000 1'b1;
	tb_size_in[8] = #30000 1'b0;
end 
// tb_size_in[ 7 ]
initial
begin
	tb_size_in[7] = 1'b0;
	tb_size_in[7] = #30000 1'b1;
	tb_size_in[7] = #30000 1'b0;
end 
// tb_size_in[ 6 ]
initial
begin
	tb_size_in[6] = 1'b0;
	tb_size_in[6] = #30000 1'b1;
	tb_size_in[6] = #30000 1'b0;
end 
// tb_size_in[ 5 ]
initial
begin
	tb_size_in[5] = 1'b0;
end 
// tb_size_in[ 4 ]
initial
begin
	tb_size_in[4] = 1'b0;
	tb_size_in[4] = #30000 1'b1;
	tb_size_in[4] = #30000 1'b0;
end 
// tb_size_in[ 3 ]
initial
begin
	tb_size_in[3] = 1'b0;
	tb_size_in[3] = #30000 1'b1;
	tb_size_in[3] = #30000 1'b0;
end 
// tb_size_in[ 2 ]
initial
begin
	tb_size_in[2] = 1'b0;
	tb_size_in[2] = #30000 1'b1;
	tb_size_in[2] = #30000 1'b0;
end 
// tb_size_in[ 1 ]
initial
begin
	tb_size_in[1] = 1'b0;
end 
// tb_size_in[ 0 ]
initial
begin
	tb_size_in[0] = 1'b0;
	tb_size_in[0] = #30000 1'b1;
	tb_size_in[0] = #30000 1'b0;
end 

// wreq_data
initial
begin
	wreq_data = 1'b0;
	wreq_data = #50000 1'b1;
	wreq_data = #9949000 1'b0;
end 

// wreq_size
initial
begin
	wreq_size = 1'b0;
	wreq_size = #30000 1'b1;
	wreq_size = #10000 1'b0;
end 
endmodule

