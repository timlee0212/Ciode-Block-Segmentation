`timescale 1ns/1ps
module tb_crc();
reg clk, reset, init, d_in, en_com, nen_shift;

wire[23:0] crc_out;

crc24 crc(
    .clk(clk),
    .reset(reset),
    .init(init),
    .en_com(en_com),
    .d_in(d_in),

    .nen_shift(nen_shift),

    .crc_out(crc_out)
);

wire[1031:0] input_vector = 1031'b

integer iterations = 1032, i, k;

//Clock Generator
initial clk=1'b0;
always #5 clk=~clk;

//Power-on Reset
initial
begin
		reset = 1'b1;
#20 	reset = 1'b0;
end


initial
begin	
#30
init=1'b1;
d_in=1'bx;
en_com = 1'b1;
nen_shift = 1'b1;
#15 init = 1'b0;
en_com = 1'b0;
d_in=1'b0;
#10;
en_com = 1'b1;
i = 0;
while (i < iterations)
begin		
	d_in = input_vector[i];		
	i = i + 1;
	#10;
end
d_in = 1'b0;
en_com = 1'b0;
end
endmodule